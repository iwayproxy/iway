name: Iway Build and Release

on:
  push:
    tags: ['v*']

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install dependencies (Linux/macOS only)
        if: runner.os != 'Windows'
        run: |
          sudo apt-get update && sudo apt-get install -y jq || brew install jq

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build project
        run: cargo build --release

      - name: Get executable name
        id: get-executable-name
        shell: bash
        run: |
          PROJECT_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')
          echo "EXECUTABLE_NAME=$PROJECT_NAME" >> $GITHUB_OUTPUT

      - name: Check binary exists
        shell: bash
        run: |
          BIN=target/release/${{ steps.get-executable-name.outputs.EXECUTABLE_NAME }}
          [[ -f "$BIN" || -f "$BIN.exe" ]] || { echo "Binary not found!"; exit 1; }

      - name: Package binary (Linux)
        if: runner.os == 'Linux' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          TAG: ${{ github.ref_name }}
          EXE_NAME: ${{ steps.get-executable-name.outputs.EXECUTABLE_NAME }}
        run: |
          mkdir -p release
          cp target/release/$EXE_NAME release/
          # 复制配置和证书文件
          cp README.md config.toml server.crt server.key release/ || true
          cd release
          TAR=${EXE_NAME}-x86_64-unknown-linux-gnu-${TAG}.tar.gz
          tar -czvf $TAR $EXE_NAME config.toml server.crt server.key
          shasum -a 256 $TAR > $TAR.sha256sum

      - name: Package binary (Windows)
        if: runner.os == 'Windows' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          TAG: ${{ github.ref_name }}
          EXE_NAME: ${{ steps.get-executable-name.outputs.EXECUTABLE_NAME }}
        shell: pwsh
        run: |
          mkdir release
          Copy-Item "target/release/$env:EXE_NAME.exe" release/
          Copy-Item "config.toml" -Destination "release/" -ErrorAction SilentlyContinue
          Copy-Item "server.crt" -Destination "release/" -ErrorAction SilentlyContinue
          Copy-Item "server.key" -Destination "release/" -ErrorAction SilentlyContinue
          $zipName = "$env:EXE_NAME-x86_64-pc-windows-msvc-$env:TAG.zip"
          Compress-Archive -Path "release/*" -DestinationPath "release/$zipName"
          Get-FileHash "release/$zipName" -Algorithm SHA256 | ForEach-Object {
            "$($_.Hash) $zipName" | Out-File "release/$zipName.sha256sum"
          }

      - name: Package binary (macOS)
        if: runner.os == 'macos' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          TAG: ${{ github.ref_name }}
          EXE_NAME: ${{ steps.get-executable-name.outputs.EXECUTABLE_NAME }}
        run: |
          mkdir -p release
          cp target/release/$EXE_NAME release/
          cp config.toml server.crt server.key release/ || true
          cd release
          TAR=${EXE_NAME}-x86_64-apple-darwin-${TAG}.tar.gz
          tar -czvf $TAR $EXE_NAME config.toml server.crt server.key
          shasum -a 256 $TAR > $TAR.sha256sum

      - name: Upload artifacts
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-executable-name.outputs.EXECUTABLE_NAME }}-${{ runner.os }}
          path: release/

  macos-universal:
    name: Build macOS Universal Binary
    runs-on: macos-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Get executable name
        id: get-executable-name
        shell: bash
        run: |
          PROJECT_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')
          echo "EXECUTABLE_NAME=$PROJECT_NAME" >> $GITHUB_OUTPUT

      - name: Build x86_64
        run: rustup target add x86_64-apple-darwin && cargo build --release --target x86_64-apple-darwin

      - name: Build aarch64
        run: rustup target add aarch64-apple-darwin && cargo build --release --target aarch64-apple-darwin

      - name: Combine universal binary
        env:
          EXE_NAME: ${{ steps.get-executable-name.outputs.EXECUTABLE_NAME }}
        run: |
          mkdir -p release
          lipo -create -output release/$EXE_NAME \
            target/x86_64-apple-darwin/release/$EXE_NAME \
            target/aarch64-apple-darwin/release/$EXE_NAME

      - name: Remove quarantine flag
        env:
          EXE_NAME: ${{ steps.get-executable-name.outputs.EXECUTABLE_NAME }}
        run: |
          xattr -c release/$EXE_NAME

      - name: Package universal binary
        env:
          TAG: ${{ github.ref_name }}
          EXE_NAME: ${{ steps.get-executable-name.outputs.EXECUTABLE_NAME }}
        run: |
          mkdir -p release
          # 复制配置和证书文件到 release 目录（此时工作目录是项目根目录）
          cp config.toml server.crt server.key release/ || true
          cd release
          TAR=${EXE_NAME}-universal-apple-darwin-${TAG}.tar.gz
          tar -czvf $TAR $EXE_NAME config.toml server.crt server.key
          shasum -a 256 $TAR > $TAR.sha256sum

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-executable-name.outputs.EXECUTABLE_NAME }}-macos-universal
          path: release/

  cross:
    name: Cross-compile (x86_64-unknown-linux-musl)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Install cross
        run: cargo install cross

      - name: Get executable name
        id: get-executable-name
        run: |
          PROJECT_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')
          echo "EXECUTABLE_NAME=$PROJECT_NAME" >> $GITHUB_OUTPUT

      - name: Build (musl)
        run: cross build --release --target x86_64-unknown-linux-musl

      - name: Package (musl)
        env:
          TAG: ${{ github.ref_name }}
          EXE_NAME: ${{ steps.get-executable-name.outputs.EXECUTABLE_NAME }}
        run: |
          mkdir -p release
          cp target/x86_64-unknown-linux-musl/release/$EXE_NAME release/
          cd release
          TAR=${EXE_NAME}-x86_64-unknown-linux-musl-${TAG}.tar.gz
          tar -czvf $TAR $EXE_NAME
          shasum -a 256 $TAR > $TAR.sha256sum

      - name: Upload musl artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-executable-name.outputs.EXECUTABLE_NAME }}-musl
          path: release/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, macos-universal, cross]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get executable name
        id: get-executable-name
        run: |
          PROJECT_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')
          echo "EXECUTABLE_NAME=$PROJECT_NAME" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            See the [CHANGELOG](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for full changes.
            ---
            Automated build for tag ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.sha256sum
